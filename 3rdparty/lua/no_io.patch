diff --git a/lauxlib.c b/lauxlib.c
index a8f2cc2..5491040 100644
--- a/lauxlib.c
+++ b/lauxlib.c
@@ -638,7 +638,7 @@ typedef struct LoadF {
   char buff[BUFSIZ];  /* area for reading file */
 } LoadF;
 
-
+#ifndef NO_IO
 static const char *getF (lua_State *L, void *ud, size_t *size) {
   LoadF *lf = (LoadF *)ud;
   (void)L;  /* not used */
@@ -698,10 +698,13 @@ static int skipcomment (LoadF *lf, int *cp) {
   }
   else return 0;  /* no comment */
 }
-
+#endif // NO_IO
 
 LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,
                                              const char *mode) {
+#ifdef NO_IO
+  return -1;
+#else
   LoadF lf;
   int status, readstatus;
   int c;
@@ -733,6 +736,7 @@ LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,
   }
   lua_remove(L, fnameindex);
   return status;
+#endif
 }
 
 
diff --git a/lauxlib.h b/lauxlib.h
index 9f91f6a..295d195 100644
--- a/lauxlib.h
+++ b/lauxlib.h
@@ -130,8 +130,10 @@ LUALIB_API void (luaL_requiref) (lua_State *L, const char *modname,
 
 #define luaL_typename(L,i)	lua_typename(L, lua_type(L,(i)))
 
+#ifndef NO_IO
 #define luaL_dofile(L, fn) \
-	(luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))
+  (luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))
+#endif
 
 #define luaL_dostring(L, s) \
 	(luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))
@@ -196,11 +198,12 @@ LUALIB_API char *(luaL_buffinitsize) (lua_State *L, luaL_Buffer *B, size_t sz);
 
 #define LUA_FILEHANDLE          "FILE*"
 
-
+#ifndef NO_IO
 typedef struct luaL_Stream {
   FILE *f;  /* stream (NULL for incompletely created streams) */
   lua_CFunction closef;  /* to close stream (NULL for closed streams) */
 } luaL_Stream;
+#endif
 
 /* }====================================================== */
 
@@ -212,18 +215,29 @@ typedef struct luaL_Stream {
 
 /* print a string */
 #if !defined(lua_writestring)
-#define lua_writestring(s,l)   fwrite((s), sizeof(char), (l), stdout)
+#ifdef NO_IO
+#define lua_writestring(s,l)  ({})
+#else
+#define lua_writestring(s,l)  fwrite((s), sizeof(char), (l), stdout)
+#endif
 #endif
 
 /* print a newline and flush the output */
 #if !defined(lua_writeline)
+#ifdef NO_IO
+#define lua_writeline()   ({})
+#else
 #define lua_writeline()        (lua_writestring("\n", 1), fflush(stdout))
 #endif
+#endif
 
 /* print an error message */
 #if !defined(lua_writestringerror)
-#define lua_writestringerror(s,p) \
-        (fprintf(stderr, (s), (p)), fflush(stderr))
+#ifdef NO_IO
+#define lua_writestringerror(s,p) ({})
+#else
+#define lua_writestringerror(s,p) (fprintf(stderr, (s), (p)), fflush(stderr))
+#endif
 #endif
 
 /* }================================================================== */
diff --git a/lbaselib.c b/lbaselib.c
index 12a9e88..29236a9 100644
--- a/lbaselib.c
+++ b/lbaselib.c
@@ -303,7 +303,7 @@ static int load_aux (lua_State *L, int status, int envidx) {
   }
 }
 
-
+#ifndef NO_IO
 static int luaB_loadfile (lua_State *L) {
   const char *fname = luaL_optstring(L, 1, NULL);
   const char *mode = luaL_optstring(L, 2, NULL);
@@ -311,6 +311,7 @@ static int luaB_loadfile (lua_State *L) {
   int status = luaL_loadfilex(L, fname, mode);
   return load_aux(L, status, env);
 }
+#endif
 
 
 /*
@@ -477,7 +478,9 @@ static const luaL_Reg base_funcs[] = {
   {"error", luaB_error},
   {"getmetatable", luaB_getmetatable},
   {"ipairs", luaB_ipairs},
+#ifndef NO_IO
   {"loadfile", luaB_loadfile},
+#endif
   {"load", luaB_load},
   {"next", luaB_next},
   {"pairs", luaB_pairs},
