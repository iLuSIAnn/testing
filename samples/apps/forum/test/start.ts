// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache 2.0 License.

import { spawnSync } from "child_process";
import * as fs from "fs";
import * as crypto from "crypto";
import selfsigned from "selfsigned";
import tmp from "tmp";
import bent from "bent";
import forge from "node-forge";
import * as util from "./util";

const demoJwtKeyPath = "test/jwt_demo_key.pem";
const demoJwtCertPath = "test/jwt_demo_cert.pem";

async function main() {
  tmp.setGracefulCleanup();

  // Accept JWTs from users logged in via Microsoft.
  const msaadJwtIssuerFile = tmp.fileSync();
  const msaadJwtIssuer = {
    issuer: "https://login.microsoftonline.com/common/v2.0",
    jwks: await bent(
      "GET",
      "json"
    )("https://login.microsoftonline.com/common/discovery/v2.0/keys"),
  };
  fs.writeFileSync(msaadJwtIssuerFile.name, JSON.stringify(msaadJwtIssuer));

  // For demo purposes only, also accept JWTs signed with our own key.
  // Those "guest" JWTs are generated by scripts in demo/ and are used for bulk import of opinions.
  generateKeyPair(demoJwtKeyPath, demoJwtCertPath);
  const guestJwtKeyPem = fs.readFileSync(demoJwtCertPath, "utf8");
  const guestJwtIssuerFile = tmp.fileSync();
  const guestJwtIssuer = {
    issuer: "https://demo",
    jwks: {
      keys: [
        { kty: "RSA", kid: "demo-key", x5c: [pemCertToB64Der(guestJwtKeyPem)] },
      ],
    },
  };
  fs.writeFileSync(guestJwtIssuerFile.name, JSON.stringify(guestJwtIssuer));

  const sandboxOpts = {
    app_bundle_dir: "dist",
    jwt_issuer_paths: [msaadJwtIssuerFile.name, guestJwtIssuerFile.name],
  };
  const { command, args } = util.getCCFSandboxCmdAndArgs(sandboxOpts);
  spawnSync(command, args, { stdio: "inherit" });
}

function pemCertToB64Der(certPem: string) {
  const cert = forge.pki.certificateFromPem(certPem);
  const certDer = forge.asn1
    .toDer(forge.pki.certificateToAsn1(cert))
    .getBytes();
  const certDerB64 = forge.util.encode64(certDer);
  return certDerB64;
}

function generateKeyPair(keyPath: string, certPath: string) {
  const keys = crypto.generateKeyPairSync("rsa", {
    modulusLength: 2048,
    publicKeyEncoding: {
      type: "spki",
      format: "pem",
    },
    privateKeyEncoding: {
      type: "pkcs8",
      format: "pem",
    },
  });
  const certPem = selfsigned.generate(null, {
    algorithm: "sha256",
    keyPair: {
      privateKey: keys.privateKey,
      publicKey: keys.publicKey,
    },
  }).cert;
  fs.writeFileSync(keyPath, keys.privateKey);
  fs.writeFileSync(certPath, certPem);
}

main().catch((e) => console.log(e));
